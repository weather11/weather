{"version":3,"sources":["userLocation/Visual.js","userLocation/GetWeather.js","userLocation/Location.js","App.js","serviceWorker.js","index.js"],"names":["Visual","props","temp","toFixed","src","weather_state","width","alt","wind_speed","air_pressure","title","distance","GetWeather","componentDidUpdate","prevProps","URL","latitude","longitude","fetch","then","res","json","setState","weatherData","undefined","JSON","parse","stringify","state","woeid","URLsity","status","alert","woeidWeather","Object","keys","length","console","log","consolidated_weather","the_temp","weather_state_abbr","this","React","Component","Location","getStatus","bind","success","error","position","coords","prompt","isFinite","navigator","geolocation","getCurrentPosition","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.232ad4bb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Visual(props){\r\n    return(\r\n    <div>\r\n        \r\n        <h1>Температура воздуха: {(+props.temp).toFixed(1)} &deg;C</h1>\r\n        <h1>Облачность: <img src={\"https://www.metaweather.com/static/img/weather/\"+props.weather_state+\".svg\"} width=\"35rem\" alt={\"облачность \"+props.weather_state}/></h1>\r\n        <h1>Скорость ветра: {(+props.wind_speed).toFixed(1)} м/с</h1>\r\n        <h1>Давление воздуха: {(props.air_pressure* 0.750064).toFixed(0)} мм.рт.ст</h1>\r\n        <h3>Ближайшая поддерживаемая метеостанция: {props.title} ({(props.distance/1000).toFixed(1)} км от вас)</h3>\r\n    </div>\r\n   \r\n    )\r\n}\r\n\r\nexport default  Visual","import React from 'react';\r\nimport Visual  from \"./Visual\";\r\n\r\nclass GetWeather extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n         \r\n        this.state = {\r\n          weatherData: [],\r\n          latitude:null,\r\n          longitude:null,\r\n          distance:\"\",\r\n          woeid:0,\r\n          woeidWeather:{},\r\n          temp:\"\",\r\n          weather_state:\"\",\r\n          wind_speed:\"\",\r\n          air_pressure:\"\",\r\n          title:\"\"\r\n        };\r\n       \r\n    }\r\n    \r\n    \r\n    \r\n    componentDidUpdate=(prevProps)=>{\r\n            \r\n      const URL=\"https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/search/?lattlong=\"+this.props.latitude+\",\"+this.props.longitude;\r\n      \r\n      \r\n      if(this.props.latitude!==prevProps.latitude||this.props.longitude!==prevProps.longitude){\r\n        fetch(URL).then(res => {return res.json();}).then(json => {\r\n          this.setState({ weatherData: json });\r\n          this.setState({ latitude: this.props.latitude });\r\n          this.setState({ longitude: this.props.longitude });\r\n        });\r\n      }\r\n\r\n      if(JSON.parse(JSON.stringify(this.state.weatherData))[0]!==undefined&&this.state.woeid===0){\r\n               \r\n        this.setState({woeid:JSON.parse(JSON.stringify(this.state.weatherData))[0].woeid})\r\n                \r\n      }\r\n        \r\n      if(this.state.woeid!==0){\r\n        var URLsity=\"https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/\"+this.state.woeid+\"/\";\r\n      }\r\n       \r\n      if(this.state.latitude!==prevProps.latitude&&this.state.woeid!==0){\r\n        \r\n\r\n        fetch(URLsity).then(res =>{\r\n          if(res.status===200){\r\n          return res.json();}else{\r\n            alert(\"У metaweather.com опять что-то пошло не так, попробуйте обновить страницу\")\r\n            return res.json();}\r\n        }).then(json => {\r\n          this.setState({ woeidWeather: json });\r\n          \r\n        });\r\n\r\n        \r\n\r\n        \r\n      }\r\n      const woeidWeather=this.state.woeidWeather;\r\n      const weatherData=this.state.weatherData;\r\n      if(Object.keys(woeidWeather).length>0){\r\n        console.log(woeidWeather.consolidated_weather[0]);\r\n        \r\n        if(this.state.temp!==woeidWeather.consolidated_weather[0].the_temp){\r\n        this.setState({temp:woeidWeather.consolidated_weather[0].the_temp})\r\n        this.setState({weather_state:woeidWeather.consolidated_weather[0].weather_state_abbr})\r\n        this.setState({wind_speed:woeidWeather.consolidated_weather[0].wind_speed})\r\n        this.setState({air_pressure:woeidWeather.consolidated_weather[0].air_pressure})\r\n        this.setState({title:woeidWeather.title})\r\n        this.setState({distance:weatherData[0].distance})\r\n        }\r\n      } \r\n    }\r\n    \r\n   \r\n\r\n\r\n    render() {\r\n        \r\n        const weatherData = JSON.stringify(this.state.weatherData);\r\n        \r\n        if (!weatherData) return <div>Loading</div>;\r\n\r\n    return (<div>\r\n              \r\n              <Visual temp={this.state.temp} weather_state={this.state.weather_state} wind_speed={this.state.wind_speed} air_pressure={this.state.air_pressure} title={this.state.title} distance={this.state.distance}/>\r\n            </div>\r\n      \r\n      )\r\n    \r\n    }\r\n} \r\n\r\nexport default GetWeather","import React from 'react';\r\nimport GetWeather from \"./GetWeather\"; \r\n\r\n\r\nclass Location extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            longitude:null,\r\n            latitude:null,\r\n            \r\n        };\r\n        this.getStatus = this.getStatus.bind(this)\r\n        this.success = this.success.bind(this)\r\n        this.error = this.error.bind(this)\r\n        \r\n    }\r\n    \r\n    \r\n\r\n    success(position) {\r\n        \r\n        this.setState({latitude:position.coords.latitude})  \r\n        this.setState({longitude:position.coords.longitude})\r\n        \r\n      }\r\n\r\n    error() {\r\n            alert('Невозможно определить ваше местоположение. Введите ваши координаты вручную.');\r\n            let latitude=prompt(\"Введите вашу текущую широту\");\r\n            let longitude=prompt(\"Введите вашу текущую долготу\");\r\n\r\n            while(latitude>90||latitude<-90||!isFinite(latitude)){\r\n                latitude=(prompt(\"Широта в градусах должна быть числом от -90 до 90. Попробуйте еще раз:\"));\r\n            }\r\n             this.setState({latitude:latitude});\r\n            while(latitude>90||latitude<-90||!isFinite(longitude)){\r\n                longitude=(prompt(\"Долгота в градусах должна быть числом от -90 до 90. Попробуйте еще раз:\"));\r\n            }\r\n             this.setState({longitude:longitude});\r\n          }   \r\n\r\n    getStatus(){\r\n       navigator.geolocation.getCurrentPosition(this.success, this.error);       \r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.getStatus();\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n    return (\r\n        <div>\r\n        \r\n        <GetWeather latitude={this.state.latitude} longitude={this.state.longitude}/>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n    \r\n\r\n\r\n\r\nexport default Location","import React from 'react';\n\nimport './App.css';\nimport Location  from \"./userLocation/Location\";\n\n\nfunction App() {\n  \n  \n  return (\n      <div>\n      \n      <Location />\n     \n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}