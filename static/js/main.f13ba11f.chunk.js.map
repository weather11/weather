{"version":3,"sources":["img/rain.gif","img/snow.gif","img/sun.gif","img/thunder.gif","img/clouds.gif","userLocation/Visual.js","userLocation/GetWeather.js","userLocation/Location.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Visual","props","weather_img","weather_state","sun","clouds","rain","thunder","snow","backimg","backgroundImage","className","style","temp","toFixed","src","alt","wind_speed","air_pressure","title","distance","GetWeather","componentDidUpdate","prevProps","URL","latitude","longitude","fetch","then","res","json","setState","weatherData","undefined","JSON","parse","stringify","state","woeid","URLsity","status","alert","woeidWeather","Object","keys","length","consolidated_weather","the_temp","weather_state_abbr","this","React","Component","Location","getStatus","bind","success","error","navigator","geolocation","getCurrentPosition","position","coords","prompt","isFinite","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f13ba11f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rain.c3e68f18.gif\";","module.exports = __webpack_public_path__ + \"static/media/snow.f4907066.gif\";","module.exports = __webpack_public_path__ + \"static/media/sun.c4e6e582.gif\";","module.exports = __webpack_public_path__ + \"static/media/thunder.4a9b1c50.gif\";","module.exports = __webpack_public_path__ + \"static/media/clouds.f54ac30d.gif\";","import React from 'react';\r\nimport rain from \"../img/rain.gif\";\r\nimport snow from \"../img/snow.gif\";\r\nimport sun from \"../img/sun.gif\";\r\nimport thunder from \"../img/thunder.gif\";\r\nimport clouds from \"../img/clouds.gif\"\r\n    //Тут просто функциональный компонент верстки. Весь css в App.css. Верстка резиновая на гридах. Никаких \"красивостей\" не делал (кроме гифки, зависящей от статуса погоды), но если надо - не проблема.\r\nfunction Visual(props){\r\n    let weather_img;\r\n    \r\n    if(props.weather_state===\"c\"||props.weather_state===\"lc\"){\r\n        weather_img=sun;\r\n    }else if(props.weather_state===\"hc\"){\r\n        weather_img=clouds;\r\n    }else if(props.weather_state===\"s\"||props.weather_state===\"lr\"||props.weather_state===\"hs\"||props.weather_state===\"h\"){\r\n        weather_img=rain;\r\n    }else if(props.weather_state===\"t\"){\r\n        weather_img=thunder;\r\n    }else if(props.weather_state===\"sn\"){\r\n        weather_img=snow;\r\n    }\r\n    let backimg={backgroundImage:`url(${weather_img})`}\r\n    return(\r\n    <div className=\"container\">\r\n        <div className=\"caption\" style={backimg}></div>\r\n        <div className=\"temp\">Температура воздуха: {(+props.temp).toFixed(1)} &deg;C</div>\r\n        <div className=\"weather_state\">Облачность: <img src={\"https://www.metaweather.com/static/img/weather/\"+props.weather_state+\".svg\"} alt={\"облачность \"+props.weather_state}/></div>\r\n        <div className=\"wind_speed\">Скорость ветра: {(+props.wind_speed).toFixed(1)} м/с</div>\r\n        <div className=\"pressure\">Атмосферное давление: {(props.air_pressure* 0.750064).toFixed(0)} мм.рт.ст</div>\r\n        <div className=\"nearest_station\">Ближайшая поддерживаемая метеостанция: {props.title} ({(props.distance/1000).toFixed(1)} км от вас)</div>\r\n    </div>\r\n   \r\n    )\r\n}\r\n\r\nexport default  Visual","import React from 'react';\r\nimport Visual  from \"./Visual\";\r\n\r\nclass GetWeather extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n         \r\n        this.state = {\r\n          weatherData: [],\r\n          latitude:null,\r\n          longitude:null,\r\n          distance:\"\",\r\n          woeid:0,\r\n          woeidWeather:{},\r\n          temp:\"\",\r\n          weather_state:\"\",\r\n          wind_speed:\"\",\r\n          air_pressure:\"\",\r\n          title:\"\"\r\n        };\r\n       \r\n    }\r\n    \r\n    \r\n    //отправляем запрос к API metaweather.com на основе координат\r\n    componentDidUpdate=(prevProps)=>{\r\n            \r\n      const URL=\"https://thingproxy.freeboard.io/fetch/https://www.metaweather.com/api/location/search/?lattlong=\"+this.props.latitude+\",\"+this.props.longitude;\r\n      \r\n      //записываем ответ (массив ближайших метеостанций) в состояние\r\n      if(this.props.latitude!==prevProps.latitude||this.props.longitude!==prevProps.longitude){\r\n        fetch(URL).then(res => {return res.json();}).then(json => {\r\n          this.setState({ weatherData: json });\r\n          this.setState({ latitude: this.props.latitude });\r\n          this.setState({ longitude: this.props.longitude });\r\n        });\r\n      }\r\n      //вытаскиваем из ответа объект ближайшей станции и записываем его \"Where On Earth IDentifier\"\r\n      if(JSON.parse(JSON.stringify(this.state.weatherData))[0]!==undefined&&this.state.woeid===0){\r\n               \r\n        this.setState({woeid:JSON.parse(JSON.stringify(this.state.weatherData))[0].woeid})\r\n                \r\n      }\r\n        \r\n      if(this.state.woeid!==0){\r\n        var URLsity=\"https://thingproxy.freeboard.io/fetch/https://www.metaweather.com/api/location/\"+this.state.woeid+\"/\";\r\n      }\r\n       //Запрашиваем погоду ближайшей метеостанции\r\n      if(this.state.latitude!==prevProps.latitude&&this.state.woeid!==0){\r\n        \r\n        fetch(URLsity).then(res =>{\r\n          if(res.status===200){\r\n          return res.json();}else{\r\n            alert(\"У metaweather.com опять что-то пошло не так, попробуйте обновить страницу\")\r\n            return res.json();}\r\n        }).then(json => {\r\n          this.setState({ woeidWeather: json });\r\n          \r\n        });\r\n             \r\n      }\r\n      //Из полученного ответа забираем нужные нам данные\r\n      const woeidWeather=this.state.woeidWeather;\r\n      const weatherData=this.state.weatherData;\r\n      if(Object.keys(woeidWeather).length>0){\r\n        if(this.state.temp!==woeidWeather.consolidated_weather[0].the_temp){\r\n          this.setState({temp:woeidWeather.consolidated_weather[0].the_temp})\r\n          this.setState({weather_state:woeidWeather.consolidated_weather[0].weather_state_abbr})\r\n          this.setState({wind_speed:woeidWeather.consolidated_weather[0].wind_speed})\r\n          this.setState({air_pressure:woeidWeather.consolidated_weather[0].air_pressure})\r\n          this.setState({title:woeidWeather.title})\r\n          this.setState({distance:weatherData[0].distance})\r\n        }\r\n      } \r\n    }\r\n    \r\n   \r\n\r\n\r\n    render() {\r\n        const weatherData = JSON.stringify(this.state.weatherData);\r\n        if (!weatherData) return <div>Loading</div>;\r\n      //Передаем данные в следующий компонент\r\n    return (<div>\r\n              <Visual temp={this.state.temp} weather_state={this.state.weather_state} wind_speed={this.state.wind_speed} air_pressure={this.state.air_pressure} title={this.state.title} distance={this.state.distance}/>\r\n            </div>\r\n            )\r\n    \r\n    }\r\n} \r\n\r\nexport default GetWeather","import React from 'react';\r\nimport GetWeather from \"./GetWeather\"; \r\n\r\n//Получаем местоположение пользователя\r\n\r\nclass Location extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            longitude:null,\r\n            latitude:null,\r\n            \r\n        };\r\n        this.getStatus = this.getStatus.bind(this)\r\n        this.success = this.success.bind(this)\r\n        this.error = this.error.bind(this)\r\n        \r\n    }\r\n    //Запрашиваем местоположение у браузера пользователя\r\n        getStatus(){\r\n            navigator.geolocation.getCurrentPosition(this.success, this.error);       \r\n        }\r\n     //Если запрос успешен, записываем координаты в состояние\r\n        success(position) {\r\n            this.setState({latitude:position.coords.latitude})  \r\n            this.setState({longitude:position.coords.longitude})\r\n        }\r\n      //Если нет, просим пользователя ввести координаты вручную\r\n        error() {\r\n                alert('Невозможно определить ваше местоположение. Введите ваши координаты вручную.');\r\n                let latitude=prompt(\"Введите вашу текущую широту\");\r\n                let longitude=prompt(\"Введите вашу текущую долготу\");\r\n                //проверяем корректность введенных данных, если данные некорректны, запрашиваем еще раз\r\n                while(latitude>90||latitude<-90||!isFinite(latitude)){\r\n                    latitude=(prompt(\"Широта в градусах должна быть числом от -90 до 90. Попробуйте еще раз:\"));\r\n                }\r\n                this.setState({latitude:latitude});\r\n                while(latitude>90||latitude<-90||!isFinite(longitude)){\r\n                    longitude=(prompt(\"Долгота в градусах должна быть числом от -90 до 90. Попробуйте еще раз:\"));\r\n                }\r\n                this.setState({longitude:longitude});\r\n            }   \r\n\r\n    \r\n    \r\n    componentDidMount(){\r\n        this.getStatus();\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n    return (\r\n        //отправляем полученные данные в следующий компонент\r\n        <div>\r\n            <GetWeather latitude={this.state.latitude} longitude={this.state.longitude}/>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n    \r\n\r\n\r\n\r\nexport default Location","import React from 'react';\n\nimport './App.css';\nimport Location  from \"./userLocation/Location\";\n\n\nfunction App() {\n  \n  \n  return (\n      <div>\n      \n      <Location />\n     \n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}